@page "/faqedit"
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@using TalentLink.Frontend.Models
@inject TalentLink.Frontend.Services.AuthenticationService AuthService

@if(AuthService.Role == "Admin"){
<PageTitle>FAQ Bearbeiten</PageTitle>

<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>FAQ Verwaltung</h2>
                <button class="btn btn-primary" @onclick="ShowCreateModal">
                    <i class="fas fa-plus"></i> Neue FAQ hinzufügen
                </button>
            </div>

            @if (alertMessage != null)
            {
                <div class="alert @alertClass alert-dismissible fade show" role="alert">
                    @alertMessage
                    <button type="button" class="btn-close" @onclick="ClearAlert"></button>
                </div>
            }

            @if (faqItems == null)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Laden...</span>
                    </div>
                </div>
            }
            else if (!faqItems.Any())
            {
                <div class="alert alert-info">
                    <i class="fas fa-info-circle"></i> Noch keine FAQ-Einträge vorhanden.
                </div>
            }
            else
            {
                <div class="row">
                    @foreach (var item in faqItems.OrderBy(f => f.OrderPosition))
                    {
                        <div class="col-md-6 mb-4">
                            <div class="card h-100">
                                <div class="card-body">
                                    <h5 class="card-title">@item.Question</h5>
                                    <p class="card-text">@item.Answer</p>
                                    <small class="text-muted">Position: @item.OrderPosition</small>
                                </div>
                                <div class="card-footer">
                                    <button class="btn btn-sm btn-outline-primary me-2" @onclick="() => ShowEditModal(item)">
                                        <i class="fas fa-edit"></i> Bearbeiten
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteItem(item.Id)">
                                        <i class="fas fa-trash"></i> Löschen
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

<!-- Modal für Erstellen/Bearbeiten -->
<div class="modal fade @(showModal ? "show d-block" : "")" tabindex="-1" style="@(showModal ? "background-color: rgba(0,0,0,0.5);" : "display: none;")">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@(isEditing ? "FAQ bearbeiten" : "Neue FAQ erstellen")</h5>
                <button type="button" class="btn-close" @onclick="CloseModal"></button>
            </div>
            <div class="modal-body">
                @if (isEditing)
                {
                    <EditForm Model="@currentUpdateItem" OnValidSubmit="@SaveItem">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        <div class="mb-3">
                            <label for="question" class="form-label">Frage *</label>
                            <InputTextArea id="question" class="form-control" @bind-Value="currentUpdateItem.Question" rows="3" />
                            <ValidationMessage For="@(() => currentUpdateItem.Question)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label for="answer" class="form-label">Antwort *</label>
                            <InputTextArea id="answer" class="form-control" @bind-Value="currentUpdateItem.Answer" rows="5" />
                            <ValidationMessage For="@(() => currentUpdateItem.Answer)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label for="orderPosition" class="form-label">Reihenfolge</label>
                            <InputNumber id="orderPosition" class="form-control" @bind-Value="currentUpdateItem.OrderPosition" />
                            <ValidationMessage For="@(() => currentUpdateItem.OrderPosition)" class="text-danger" />
                        </div>

                        <div class="d-flex justify-content-end">
                            <button type="button" class="btn btn-secondary me-2" @onclick="CloseModal">Abbrechen</button>
                            <button type="submit" class="btn btn-primary">Aktualisieren</button>
                        </div>
                    </EditForm>
                }
                else
                {
                    <EditForm Model="@currentCreateItem" OnValidSubmit="@SaveItem">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        <div class="mb-3">
                            <label for="question" class="form-label">Frage *</label>
                            <InputTextArea id="question" class="form-control" @bind-Value="currentCreateItem.Question" rows="3" />
                            <ValidationMessage For="@(() => currentCreateItem.Question)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label for="answer" class="form-label">Antwort *</label>
                            <InputTextArea id="answer" class="form-control" @bind-Value="currentCreateItem.Answer" rows="5" />
                            <ValidationMessage For="@(() => currentCreateItem.Answer)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label for="orderPosition" class="form-label">Reihenfolge</label>
                            <InputNumber id="orderPosition" class="form-control" @bind-Value="currentCreateItem.OrderPosition" />
                            <ValidationMessage For="@(() => currentCreateItem.OrderPosition)" class="text-danger" />
                        </div>

                        <div class="d-flex justify-content-end">
                            <button type="button" class="btn btn-secondary me-2" @onclick="CloseModal">Abbrechen</button>
                            <button type="submit" class="btn btn-primary">Erstellen</button>
                        </div>
                    </EditForm>
                }
            </div>
        </div>
    </div>
</div>
}
else
{
    <div class="alert alert-danger">Zugriff verweigert. Nur Admins können diese Seite aufrufen.</div>
}
@code {
    private List<FaqItem>? faqItems;
    private bool showModal = false;
    private bool isEditing = false;
    private FaqItemCreateDto currentCreateItem = new();
    private FaqItemUpdateDto currentUpdateItem = new();
    private int editingId = 0;
    private string? alertMessage;
    private string alertClass = "";


    protected override async Task OnInitializedAsync()
    {
        await LoadFaqItems();
    }

    private async Task LoadFaqItems()
    {
        try
        {
            var response = await HttpClient.GetAsync("https://localhost:7024/api/FaqItems");
            if (response.IsSuccessStatusCode)
            {
                faqItems = await response.Content.ReadFromJsonAsync<List<FaqItem>>();
            }
            else
            {
                ShowAlert("Fehler beim Laden der FAQ-Einträge.", "alert-danger");
            }
        }
        catch (Exception ex)
        {
            ShowAlert($"Fehler: {ex.Message}", "alert-danger");
        }
    }

    private void ShowCreateModal()
    {
        isEditing = false;
        currentCreateItem = new FaqItemCreateDto();
        showModal = true;
    }

    private void ShowEditModal(FaqItem item)
    {
        isEditing = true;
        editingId = item.Id;
        currentUpdateItem = new FaqItemUpdateDto
        {
            Question = item.Question,
            Answer = item.Answer,
            OrderPosition = item.OrderPosition
        };
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        isEditing = false;
        editingId = 0;
    }

    private async Task SaveItem()
    {
        try
        {
            HttpResponseMessage response;
            
            if (isEditing)
            {
                response = await HttpClient.PutAsJsonAsync($"https://localhost:7024/api/FaqItems/{editingId}", currentUpdateItem);
            }
            else
            {
                response = await HttpClient.PostAsJsonAsync("https://localhost:7024/api/FaqItems", currentCreateItem);
            }

            if (response.IsSuccessStatusCode)
            {
                ShowAlert(isEditing ? "FAQ erfolgreich aktualisiert!" : "FAQ erfolgreich erstellt!", "alert-success");
                CloseModal();
                await LoadFaqItems();
            }
            else
            {
                ShowAlert("Fehler beim Speichern der FAQ.", "alert-danger");
            }
        }
        catch (Exception ex)
        {
            ShowAlert($"Fehler: {ex.Message}", "alert-danger");
        }
    }

    private async Task DeleteItem(int id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Sind Sie sicher, dass Sie diese FAQ löschen möchten?"))
        {
            try
            {
                var response = await HttpClient.DeleteAsync($"https://localhost:7024/api/FaqItems/{id}");
                if (response.IsSuccessStatusCode)
                {
                    ShowAlert("FAQ erfolgreich gelöscht!", "alert-success");
                    await LoadFaqItems();
                }
                else
                {
                    ShowAlert("Fehler beim Löschen der FAQ.", "alert-danger");
                }
            }
            catch (Exception ex)
            {
                ShowAlert($"Fehler: {ex.Message}", "alert-danger");
            }
        }
    }

    private void ShowAlert(string message, string cssClass)
    {
        alertMessage = message;
        alertClass = cssClass;
        StateHasChanged();
    }

    private void ClearAlert()
    {
        alertMessage = null;
        alertClass = "";
    }
}
