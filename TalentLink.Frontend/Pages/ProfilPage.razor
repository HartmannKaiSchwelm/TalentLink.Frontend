@page "/profile"

@using TalentLink.Frontend.Models

@inject TalentLink.Frontend.Services.AuthenticationService AuthService
@inject NavigationManager Navi
@inject HttpClient HttpClient

<div class="container d-flex justify-content-center align-items-center" style="min-height: 80vh;">
    <div class="card shadow-sm p-4" style="max-width: 350px; width: 100%;">
        <h4 class="mb-4 text-center">Profil</h4>
        <dl class="row mb-0">
            <dt class="col-4">Name:</dt>
            <dd class="col-8">@AuthService.UserName</dd>
            <dt class="col-4">E-Mail:</dt>
            <dd class="col-8">@AuthService.Email</dd>
            <dt class="col-4">Rolle:</dt>
            <dd class="col-8">@AuthService.Role</dd>
        </dl>
        @if (AuthService.Role == "Senior")
        {
            <button class="btn btn-outline-primary w-100 mt-3" @onclick="createJob">Job anbieten</button>
            @if (loadingJobs)
            {
                <div>Lade Jobs...</div>
            }
            else if (createdJobs != null && createdJobs.Any())
            {
                <ul class="list-group mt-3">
                    @foreach (var job in createdJobs)
                    {
                        <li class="list-group-item">
                            <b>@job.Title</b><br />
                            <span>@job.Description</span>
                        </li>
                    }
                </ul>
            }
            else
            {
                <span>Hier könnten ihre vergebenen Jobs stehen.</span>
            }
        }
    </div>
</div>

@code {
    List<Job> createdJobs = new();
    bool loadingJobs = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadCreatedJobsAsync();
    }

    async Task LoadCreatedJobsAsync()
    {
        if (AuthService.Role != "Senior") return;
        loadingJobs = true;
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7024/api/Job/created-by-me");
            if (!string.IsNullOrEmpty(AuthService.Token))
            {
                request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", AuthService.Token);
            }
            var response = await HttpClient.SendAsync(request);
            if (response.IsSuccessStatusCode)
            {
                var jobs = await response.Content.ReadFromJsonAsync<List<Job>>();
                if (jobs != null)
                    createdJobs = jobs;
            }
        }
        finally
        {
            loadingJobs = false;
        }
    }

    void createJob() => Navi.NavigateTo("/createjob");
}